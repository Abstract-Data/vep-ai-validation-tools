name: Cleanup Ignored Files

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]
  workflow_dispatch: # Allow manual triggering

jobs:
  cleanup-ignored-files:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch full history to check all files

      - name: Check for ignored files
        id: check-ignored
        run: |
          echo "Checking for files that should be ignored..."

          # Find files that are tracked by git but should be ignored according to .gitignore
          # This uses git check-ignore to test each tracked file against .gitignore patterns
          ignored_files=""
          while IFS= read -r file; do
            if git check-ignore --quiet "$file"; then
              ignored_files="$ignored_files$file"$'\n'
            fi
          done < <(git ls-files)

          if [ -n "$ignored_files" ]; then
            echo "Found files that should be ignored:"
            echo "$ignored_files"
            echo "ignored_files=true" >> $GITHUB_OUTPUT
            echo "files_list<<EOF" >> $GITHUB_OUTPUT
            echo "$ignored_files" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          else
            echo "No ignored files found in repository."
            echo "ignored_files=false" >> $GITHUB_OUTPUT
          fi

      - name: Remove ignored files
        if: steps.check-ignored.outputs.ignored_files == 'true'
        run: |
          echo "Removing files that should be ignored..."

          # Find and remove files that are tracked by git but should be ignored
          while IFS= read -r file; do
            if git check-ignore --quiet "$file"; then
              echo "Removing: $file"
              git rm --cached "$file"
            fi
          done < <(git ls-files)

          # Check if there are any changes to commit
          if git diff --cached --quiet; then
            echo "No changes to commit."
          else
            echo "Committing removal of ignored files..."
            git config --local user.email "action@github.com"
            git config --local user.name "GitHub Action"
            git commit -m "ðŸ”’ Remove files that should be ignored (security cleanup)

            This commit removes files that match patterns in .gitignore,
            including potential credentials, secrets, and sensitive data.

            Files removed:
            ${{ steps.check-ignored.outputs.files_list }}"

            echo "Pushing changes..."
            git push
          fi

      - name: Create issue for manual review
        if: steps.check-ignored.outputs.ignored_files == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const { data: issues } = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: ['security', 'cleanup']
            });

            // Check if an issue already exists
            const existingIssue = issues.find(issue =>
              issue.title.includes('Ignored Files Cleanup') &&
              issue.body.includes('Files that should be ignored were found')
            );

            if (!existingIssue) {
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: 'ðŸ”’ Ignored Files Cleanup - Manual Review Required',
                body: `## Security Alert: Files That Should Be Ignored Found

                The GitHub Actions workflow detected files in the repository that match patterns in \`.gitignore\` and should not be committed.

                ### Files Found:
                \`\`\`
                ${{ steps.check-ignored.outputs.files_list }}
                \`\`\`

                ### Action Taken:
                - âœ… Files have been removed from the repository
                - âœ… Changes have been committed and pushed

                ### Security Implications:
                These files may contain:
                - API keys and secrets
                - Database credentials
                - Personal information
                - Configuration files with sensitive data

                ### Next Steps:
                1. Review the removed files to ensure no legitimate files were accidentally removed
                2. Check if any of these files contained sensitive information
                3. If credentials were exposed, rotate them immediately
                4. Consider using [BFG Repo-Cleaner](https://rtyley.github.io/bfg-repo-cleaner/) to completely remove sensitive data from git history

                ### Prevention:
                - Always check \`.gitignore\` before committing
                - Use pre-commit hooks to catch ignored files
                - Regularly run this cleanup workflow

                ---
                *This issue was automatically created by the cleanup workflow.*`,
                labels: ['security', 'cleanup', 'automated'],
                assignees: ['${{ github.repository_owner }}']
              });
            }

      - name: Success message
        if: steps.check-ignored.outputs.ignored_files == 'false'
        run: |
          echo "âœ… Repository is clean - no ignored files found!"
          echo "All files in the repository are properly tracked and don't match .gitignore patterns."
