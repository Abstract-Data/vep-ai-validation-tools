name: Release Automation

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]
    types: [opened, synchronize, reopened, closed]
  workflow_dispatch: # Allow manual triggering

# Set permissions for the entire workflow
permissions:
  contents: write
  issues: write
  pull-requests: write
  checks: write

jobs:
  update-release-drafter:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Required for Release Drafter

      - name: Update Release Drafter
        uses: release-drafter/release-drafter@v5
        id: release_drafter
        with:
          config-name: release-drafter.yml
          disable-autolabeler: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        continue-on-error: true

      - name: Comment PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '## 📋 Release Notes Preview\n\n' + '${{ steps.release_drafter.outputs.template }}'
            })

  create-release:
    runs-on: ubuntu-latest
    needs: update-release-drafter
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Create Release
        uses: release-drafter/release-drafter@v5
        id: release_drafter
        with:
          config-name: release-drafter.yml
          publish: true
          tag: ${{ steps.release_drafter.outputs.tag_name }}
          name: ${{ steps.release_drafter.outputs.name }}
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        continue-on-error: true

      - name: Debug Release Drafter Outputs
        if: always()
        run: |
          echo "🔍 Debugging Release Drafter outputs:"
          echo "Tag name: '${{ steps.release_drafter.outputs.tag_name }}'"
          echo "Release name: '${{ steps.release_drafter.outputs.name }}'"
          echo "Template: '${{ steps.release_drafter.outputs.template }}'"
          echo "Previous tag: '${{ steps.release_drafter.outputs.previous_tag }}'"
          echo "Release URL: '${{ steps.release_drafter.outputs.url }}'"

      - name: Update pyproject.toml version
        if: steps.release_drafter.outputs.tag_name != ''
        run: |
          # Extract version from tag (remove 'v' prefix)
          TAG_NAME="${{ steps.release_drafter.outputs.tag_name }}"

          if [ -z "$TAG_NAME" ]; then
            echo "❌ No tag name available, skipping version update"
            exit 0
          fi

          # Remove 'v' prefix if present
          VERSION="${TAG_NAME#v}"

          echo "📦 Updating version to: $VERSION"

          # Update version in pyproject.toml
          if [ -f "pyproject.toml" ]; then
            sed -i "s/^version = \".*\"/version = \"$VERSION\"/" pyproject.toml
            echo "✅ Updated pyproject.toml version to $VERSION"
          else
            echo "❌ pyproject.toml not found"
            exit 1
          fi

          # Commit and push the version update
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add pyproject.toml
          git commit -m "📦 Bump version to $VERSION [skip ci]"
          git push

      - name: Create Release Summary
        if: always()
        run: |
          echo "## 🚀 Release Automation Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Status:** ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
          echo "**Release Tag:** ${{ steps.release_drafter.outputs.tag_name || 'None' }}" >> $GITHUB_STEP_SUMMARY
          echo "**Release Name:** ${{ steps.release_drafter.outputs.name || 'None' }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Actions Taken:" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Updated Release Drafter changelog" >> $GITHUB_STEP_SUMMARY
          if [ "${{ steps.release_drafter.outputs.tag_name }}" != "" ]; then
            echo "- ✅ Created GitHub release" >> $GITHUB_STEP_SUMMARY
            echo "- ✅ Updated pyproject.toml version" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Next Steps:" >> $GITHUB_STEP_SUMMARY
          echo "1. Review the generated release notes" >> $GITHUB_STEP_SUMMARY
          echo "2. Publish the release if ready" >> $GITHUB_STEP_SUMMARY
          echo "3. Update documentation if needed" >> $GITHUB_STEP_SUMMARY
